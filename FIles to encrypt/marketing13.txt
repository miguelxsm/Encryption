Tutorial de Programación desde Cero | Aprende lo Básico de Cualquier Lenguaje de Programación - YouTube
https://www.youtube.com/watch?v=Q1BLug7B_3A

Transcript:
(00:00) alguna vez escuchado la frase todos deberían aprender a programar lo bueno de la programación es que no necesitas muchos recursos para empezar y es mucho más fácil de lo que parece solamente necesitas una computadora y ya puedes arrancar a armar tus propias cosas desde cero si no sabes nada de programación o ya escribiste algunos programas básicos pero que les tenía una base más soria este vídeo es para vos en este tutorial de programación desde cero te voy a dar los fundamentos básicos de programación que te van a servir para cualquier
(00:26) lenguaje para que después de este vídeo se sientan cómodos aprendiendo el lenguaje que más les interesa de este vídeo es que sea interactivo así que si tienen una pc disponible genial vayan pasando el vídeo y van siguiendo lo que lo que yo hago así aprenden mejor y también quedan los archivos y eso lo primero que vamos a hacer es preparar nuestro entorno de desarrollo así que vamos a ello bueno en este tutorial vamos a estar trabajando con para eso así que lo primero que van a tener que hacer es descargarse winston vamos a
(00:57) negador y buscamos python y acá tenemos las descargas se instalan en la última versión estable 9 puntos 3.7 en este caso la descarga les va a descargar instalador y necesitarán en su ordenador una vez instalado lo que van a querer hacer es abrir la consola que esto se hace buscando cmd en el buscador de windows y acá pueden hacer lo siguiente escriben y para saber si tienen país han instalado y le va a pasar esto les aparece la versión de país son y listo entraron a la consola de para eso si bien esto es para ver si
(01:30) instala un país son correctamente esta consola ya la podemos cerrar y lo siguiente que vamos a hacer es crear una carpeta donde sea en esta carpeta vamos a estar abriendo nuestra consola y vamos a poner nuestros archivos de prueba así que si ya instalamos python este es el siguiente paso crear una carpeta acá esta carpeta lo vamos a llamar por ejemplo demo pero básica en esa abierta acá vamos a empezar a crear nuestros archivos la primera vez que el programa lo pueden hacer el no para tranquilamente así que les voy a
(02:01) demostrar como como cómo se crea un programa un script de payton desde cero solamente con lupa así que vamos a crear un nuevo archivo de texto y vamos a llamarlo mi script punto y esto es muy importante que le cambien la extensión del archivo si la extensión del archivo les aparece como txt o no les aparece nada tienen que ir acá arriba donde dice view o vistas y chequear este casillero que dice para janet fyle name extensions en español extensiones de nombre del archivo para ver cómo desaparece la extensión del archivo y si desaparece
(02:40) punto txt porque crearon un archivo de europa lo cambian a punto país bien acá es donde vamos a abrir la consola y cómo lo vamos a abrir acá no vamos a abrir escribiendo cmd en la dirección hacia arriba ven dónde está el típico mito la carpeta y todas todas las direcciones y donde hacemos clic y escribimos cmd para abrir una consola directamente en esta carpeta en mi consola es naranja pero ustedes va a ser de color negro con letras lisas y esto indica que se abrió en esta carpeta eso es muy importante porque si la
(03:15) consola se abre en cualquier otra carpeta no les voy a encontrar el archivo pero bueno esto es básicamente un archivo que no tiene nada así que lo vamos a editar con nuestro notepad en principio vamos a escribir vamos a programar nuestro primero script de país son en notepad vamos a imprimir en la pantalla con esta función print paréntesis hola mundo y listo guardan esto ahora en este archivo los cierran y ya está este es mi primer archivo paixón si para correrlo van a la consola que abrieron antes y escriben lo siguiente y mi script un
(03:55) tope y así lo corren y les corre el programa también lo que pueden hacer es pedir llega y acá apretar la tecla a cabo iba a ir escribiendo los archivos que tienen en esta carpeta en nuestro caso tenemos solamente este archivo entonces lo único que aparece pero bueno no queremos estar programando en notepad porque no es muy práctico que digamos entonces le voy a recomendar un par de programas otros editores de texto como el notepad pero que son más para escribir código no la mayoría de los tutoriales básicos les van a decir que
(04:24) se descarguen un ide pero la razón por la que no me gusta el ide es que no me parece básico digamos tiene un montón de herramientas que si bien son prácticas afectan mucho el aprendizaje de alguien que recién arranca para mí alguien que recién arranca tiene que empezar así trabajando con la consola y editando con editores de texto los dos editores de texto que se pueden instalar para empezar son nou para más más i villó studio code el nos vamos más es un toque más liviano pero no tiene tantas herramientas y el viso studio code es
(04:53) uno de los mejores editor de texto que hay porque un montón de gente lo usa tiene extensiones es fachero tiene integraciones con guita etcétera tri montón de cosas y el vicio estudios code podría ser considerado un ide si si es que escribís tu código y lotes te has todo el mismo programa pero para los propósitos de este tutorial lo vamos a llamar como editor de textos y no ocupa más más se ve de esta manera es como un notepad pero un toque mejorado más optimizado para escribir código pero en este tutorial vamos a hacer el bello
(05:23) estudio code así que si quieren se instalan eso que está muy bueno pero siempre recuerden que pueden programar el notepad tranquilamente pueden programar en el bloc de notas tranquilamente así que si no quieren instalarse nada aparte de payton no lo van a notar mucho que es diferente como resuelve los problemas la computadora que como lo resuelve el cerebro humano hay veces que les van a plantear así problemitas de programación de algoritmos y nosotros lo resolvemos de una forma en nuestro cerebro son problemas así simples pero tener que
(05:57) pensarlo desde el punto de vista de la computadora así con pasos se nos puede complicar algunas personas la razón por la que instalamos paixón es porque el compilador de payton se encarga de traducir estas letras este este texto que nosotros escribimos a binario para que la computadora lo entienda y después nos da el resultado en la mayoría de los idiomas necesitas así un compilador pero por ejemplo para programar el html por ejemplo no necesitan ningún compilador no necesita instalarse en nada pueden escribir su
(06:29) código en notepad y directamente ejecutarlo y ya está le voy a hablar un poco de la consola la consola se usa para muchas cosas pero nosotros solamente lo vamos a usar para ejecutar nuestros archivos sin necesidad de tener unida como ya les mencioné antes es muy importante que la consola esté abierta en la carpeta que ustedes desean si de casualidad la consola la abrieron en otro lado como por ejemplo abriendo la desde acá desde la tecla windows para ver que por defecto se les abren users y su nombre así que como es importante
(07:00) abrir la consola en la carpeta que es mucho más fácil abrir la carpeta y en la dirección escribir cmd y enter y esto se les abre la consola directamente en su carpeta desea algunos comandos útiles de la consola que van a encontrar es el gel que les da una lista de comandos el cls para limpiar la consola cls el beer les da lo que hay dentro de la carpeta y el cd es para ir cambiando de dirección las variables pueden tomar diferentes tipos de datos pero por simplicidad vamos a ver cuatro normas si si tienes un número así puede ser un inc
(07:40) si es entero sea esto sea negativo o sea cero y si tienes un decimal se va a llamar loud si tienes una cadena se va a llamar string una cadena de caracteres como por ejemplo un nombre o un texto se va a llamar string y también pueden tener true falls es un mismo tipo de datos llamado william este hashtag que ven acá significa que es un comentario en python cuando ustedes en pay son escriben algo después del hashtag esto el compilador no se los va a leer y lo va a ignorar recuerden que trui fortsmann con mayúscula
(08:32) para hacer de tipo julián o para saber el tipo de dato con el que estamos trabajando podemos imprimirlo en consola usando el método type así que escribimos type desde nuestra variable y la cerramos entre paréntesis para ver que tenemos doble paréntesis 1 que desde el método print y otro que desde el método type estamos dando mucho la palabra método básicamente método piensen que es algo que el lenguaje python tiene integrado es como una herramienta que viene integrada con el lenguaje eso es explicado de una forma muy básica
(09:06) obviamente que la definición formal de método es un poco diferente así que guardamos y ejecutamos nuestro archivo y van a ver que me aparece la clase de mi variable cuando quieran imprimir un número pegado con un texto se van a encontrar con un problema por ejemplo digamos que esto es una edad y queremos imprimir el texto que haya edad más el valor de nuestra variable así que vamos a agregar a nuestro a nuestro método print el siguiente texto que diga la edad dos puntos espacio y acá cuando entre nuestro texto y la variable
(09:42) siempre tenemos que poner un más para concatenar lo si nosotros guardamos y ejecutamos esto van a ver que nos encontramos con un problema esto es porque estamos tratando de concatenar lo que es un string lo que es una cadena con un tipo de número puede ser interior o puede ser float sí entonces lo que tenemos que realizar para que esto funcione correctamente es transformar nuestro here a string en este caso entonces lo que hacemos es simplemente usar otro método de payton que es str y ponemos nuestra variable entre paréntesis y sola
(10:18) se transforma a string ahora si lo ejecutamos todo debería funcionar correctamente bueno a ver que si queremos imprimir la variable numérica sola no no no tenemos ningún problema el problema nos aparece cuando queremos juntar strings con interés o con clouds esto mismo que hicimos recién lo podemos hacer con dos variables creamos una variable más que diga edad dos puntos y el espacio y podemos escribir acá adentro de nuestro print de masaje guardamos y ejecutamos y van a ver que va a parecer nuestro mismo bueno ahora nos olvidamos de cambiarlo a
(10:55) string las cosas pasan modificamos y transformamos nuestra variable string para que funcione correctamente y una vez guardado y ejecutado y para ver que tenemos el mismo output este es un buen momento para decirles que subo todos los lunes así contenido de programación y los martes directos a la noche también programando así que asegúrense de suscribirse y la campanita así no se pierden nada de eso bueno fue un gusto programar el notebook pero ahora nos vamos a ir al visual studio code así que le damos clic derecho open with code se
(11:28) nos abrirá esta ventanita guanchera y van a ver que ahora tiene más colores entonces es más difícil distinguir las palabras clave vamos a comentar todo esto y vamos con los siguientes que son los condicionales que son los condicionales los condicionales son básicamente una pregunta si cierta condición se da un bloque de código y si no se ejecuta otro bloque de código esto se entiende mucho mejor con un ejemplo para los condicionales se usan las palabras clave y elx en programación las palabras claves son palabras reservadas que no podemos
(12:04) usarlas para nombrar nuestras variables por ejemplo nuestra variable no se puede llamar if y tampoco se va a poder llamar eres escribir un condicional simplemente escribimos if y acaba nuestra condición entonces acá en nuestra condición vamos a poner por ejemplo 5 mayor a 2 ponemos dos puntos y bajamos y acá escribimos lo que queremos ejecutar si esta condición es cierta entonces como 5 es mayor que dos vamos a realizar los siguientes frings vamos a decirle a la consola que la condición se cumplió y acá abajo vamos a escribir el que es
(12:50) lo que vamos a ejecutar si la condición no se cumple entonces el sexto punto enter print la condición no se cumplió bien tenemos este código estas cuatro líneas de código corremos nuestro programa para ver si funciona y ven que dice que la condición se cumplió si nosotros por ejemplo ponemos uno mayor a 2 lo cual no es cierto entonces se va a ejecutar esto de trabajo la condición no se cumplió si siempre cada vez que quieran ejecutar lo recuerden guardar el archivo antes de ejecutarlo porque si no no le van a tomar los
(13:33) cambios este espacio que ven acá es muy importante tenerlo porque si no lo tienen en python ven que le salta error porque cuando abrimos un bloque de código digamos en país son tiene que estar bien intentado para ver que se trató de ejecutar esto me tira error porque el bloque tiene que estar intentado no es necesario que tengamos solo una línea de código por cada bloque sino que podemos agregar una más acá que diga otra cosa por ejemplo ahora pusimos dos líneas de código por cada bloque y no hay problema con esto pueden poner todas las líneas
(14:05) de código que quieran en un bloque y mientras está intentado se va a ejecutar después del if ven este sería un ejemplo de condicional binario con dos bloques uno de si se da la condición y otro si no sea la condición este xerez es totalmente opcional pueden tener solamente el ife sí como si fuese un filtro si nosotros queremos podemos agregar una condición más para eso entre el eve y el else vamos a tener otra palabra clave llamada el if she y el if necesita otra condición porque es como nuestra condición secundaria digamos en nuestra
(14:43) condición que vamos a preguntar si está con esta primera condición no será entonces vamos a hacer lo siguiente aquí arriba vamos a crear una variable que se va a llamar número y vamos a darle un valor de 5 digamos que no sabemos cuál es el valor de número queremos chequear si es positivo negativo o es 0 ven que ahí no tengo dos condiciones entonces un condicional que es binario no me sirve necesito dos condiciones necesito preguntar si es mayor a cero si es igual a cero o si es menor a cero y en base a eso la salida que es lo que sale en la
(15:18) consola va a ir cambiando entonces primero preguntó si número es mayor a cero y si lo es entonces imprimo en la consola número es positivo acá en el el if vamos a poner nuestra segunda condición que va a ser sin número no es mayor y más sin número no es mayor a cero entonces vamos a preguntar si número es igual a cero para hacer esto usamos dos iguales y acá escribimos algo parecido solamente que en vez de positivo escribimos cero y en el evento necesitamos poner ninguna condición porque es lo que se ejecuta sin ninguna de estas dos se cumplió el
(16:01) els va a ser número es negativo ya que ese número no es positivo y tampoco es cero entonces es negativo probamos nuestro programa porque funciona correctamente con número positivo probamos con un número negativo guardamos siempre antes de ejecutar número es negativo y probamos con cero también número 0 ese sería nuestro condicional ternario puede tener muchísimos más el if pueden poner todas las condiciones que quieran de esta forma pero obviamente con condiciones diferentes no tiene sentido que sea la misma condición pero no
(16:37) solamente podemos preguntar si es mayor que b también vamos preguntar si es mayor o igual a b si a es menor que b menor o igual que ve o distinto debe usando el signo de exclamación igual podemos tener también más condiciones en el mismo if usando el keyboard and or si usamos el anc ambas condiciones que tienen que cumplir esto es condición 1 y condición 2 te tienen que cumplir y si usamos el or entonces esto de acá abajo se ejecuta si se cumple en cualquiera de las dos condiciones resulta que en pay son por
(17:14) lo general estos paréntesis no se ponen las condiciones simplemente se escriben sin los paréntesis así que cuando escriban un condicional no hace falta que les pongan paréntesis como lo hice yo acá arriba vamos a ejecutar esto para ver qué a vale 8 y de vale 9 entonces a es distinto debe entonces la condición se cumple porque como tenemos el ahora acá basta con que alguna de las dos condiciones se cumplan aunque esta condición de acá no se cumpla que en nuestro caso como ésta se cumple entonces me va a imprimir esto
(17:45) guardamos y ejecutamos el valor que dice condición cumplida si nosotros acá ponemos el and en cambio no va a aparecer nada porque porque no se cumple la condición ya que a si bien es distinto debe y no es mayor que ver entonces si nosotros ejecutamos esto no va a imprimir el programa termina porque después de esto no hay más líneas de código lo siguiente que vamos a ver son las repetitivas también conocidas como ciclos o loops repetitivas estas repetitivas sirven para ejecutar un bloque de código una cantidad determinada de veces osea si no
(18:22) quieren realizar la misma acción copiando y pegando las muchas veces usan una repetitiva a modo de ejemplo digamos que queremos imprimir o la 5 veces no entonces usualmente lo haríamos escribiendo print de esta manera hola recuerden que el texto siempre va entre doble comillas y lo copiaremos cinco veces para imprimir o las cinco veces ejecutamos y vemos lo que sabe hola 5 veces entonces esto lo podemos lograr con solamente una sola línea de código y un una repetitiva en este caso vamos a usar el wild además repetitivas pero por
(19:05) simplicidad vamos a ver wild a while le vamos a tener que proporcionar una condición acá pero antes de eso vamos a crear una variable llamada contador que va a trabajar en conjunto con el wire el contador va a tener valor cero al principio iba a ir hasta la cantidad de veces que queremos ejecutar nuestro bloque de código entonces la condición de while va a hacer que el contador sea menor a la cantidad de veces que queremos ejecutar nuestro bloque de código en este caso 5 porque queremos imprimir las 5 veces en dos puntos pero
(19:37) eso lo podemos dejar así recuerden que cada vez que nosotros creamos un nuevo bloque de código usando dos puntos tenemos que intentar la línea abajo entonces nos ponemos el cursor acá y apretamos tap también si ustedes tienen un curso de acá y apretar enter visual studio code automáticamente le va a dejar les va a intentar la siguiente línea esto por ejemplo es algo que en el notepad común no pasaba este código así como está no lo podemos ejecutar porque se va a ejecutar esta línea infinitas veces ya que el valor del contador no
(20:09) cambia nunca entonces que tenemos que hacer a la siguiente línea que sigue siendo dentro de while sigue siendo dentro del mismo bloque de código vamos a hacer que el contador vaya creciendo de alguno contador va a ser igual a contador más uno esto hace que contador vaya creciendo de a uno agarramos nuestro valor actual de contador le sumamos uno y lo guardamos en la misma variable otra forma de escribir esto es en vez de hacer esto tal vez sea menos confuso escribirlo de la siguiente manera contador más igual a uno si
(20:41) probamos nuestro código debería funcionar si realiza exactamente lo mismo lo van a ver que lo hicimos de una forma un poco más elegante no por simplicidad por lo general al contador se le da el nombre y entonces vamos a cambiar el nombre en esta variable contador siempre que la usemos lo vamos a poner y entonces recuerden inicializar y en cero y acá poner la cantidad de veces que quieren ejecutar su bloque el código y cuando terminan con su bloque el código es aumentar y por 1 y tienen su repetitivo si se les ocurre algún uso práctico para
(21:13) repetitiva los invito a que lo hagan ustedes mismos pero por lo general se usan para recorrer colecciones de datos más grandes como arreglos que vamos a ver al final del vídeo lo siguiente que vamos a ver son las funciones las funciones piénsenlo como un bloque de código que lo podemos usar las veces que queramos mientras sepamos el número la función básicamente es código reciclable es para tener todo más ordenado para crear una función usamos la palabra clave def recuerden que estas palabras clave son palabras que no podemos usar
(21:44) para el nombre de estas variables usamos la palabra clave de ponemos el nombre de nuestra función en caso de llamar mi función y tenemos que abrir y cerrar paréntesis acá es donde van a ir los argumentos vamos a ir más en detalle después de estos dos puntos como cualquier bloque de código y acá vamos a escribir nuestro código si notaron los nombres de las variables y de las funciones empieza en minúscula y cuando cambian de palabra tienen que tener esta mayúscula eso es por convención y se llama camr case así
(22:18) que cuando creen en los nombres de las funciones procuren que empiece en minúscula cuando cambien de palabra tenga mayúscula también con las variables lo mismo tienen que usar el camr kate para el nombre de sus variables digamos que queremos que mi función salude no entonces vamos a crear una variable llamada nombre vamos a ponerle el valor de david y después vamos a imprimirlo print vamos a escribir hola espacio y acá vamos a escribir más y nuestra variable que es nombre y al final vamos a agregarle un signo exclamación esta es la creación de
(22:52) la función si yo nunca usó la función entonces nuestro compilador nunca va a imprimir esto miren les muestro guardamos y corremos nuestro programa bueno a ver que no pasa absolutamente nada pues acá arriba no tenemos ningún print este si bien éste esté print pero no cumple la condición así que no se ejecuta todo esto está comentado y esta función que tenemos acá nunca llamada entonces como llamamos a la función vamos a la función parecido a como estuvimos llamando estos métodos como por ejemplo print y type de la siguiente
(23:23) manera de omni función i abrimos cerramos 46 y acá estamos llamando a la función entonces va a ejecutar siempre el llamado de la función en python va a tener que estar abajo de donde queremos la función en otros idiomas como en javascript podemos llamarla acá arriba por ejemplo iba a funcionar correctamente pero para para eso no es el caso así que procuren que primero crear sus funciones y después usarlas debajo vamos a aprobar esto y van a ver que ahí funciona correctamente lo útil de tener una función y no tener simplemente esto así
(23:58) suelto es que podemos reutilizar es el código lo puedo usar varias veces en diferentes partes de nuestro código por ejemplo digamos que acá tenemos algo de código el comentario no se hace así en país 11 se conecta hasta algo de código ya tenemos más código ahora tenemos más código y a diferencia de la repetitiva podemos llamar la función después poner el código llaman volver a llamarla algo del código se podría llamar la y poner más código iba a funcionar correctamente si bien esta función lo que hace es directamente imprimir a la consola o la
(24:36) más nombre más sino exclamación que es un stream no es una buena práctica y por lo general queremos que nuestras funciones terminen con un richard richard así que lo que hace es retornar nuestro string entonces cuando nosotros llamamos a mi función para ver qué si yo ejecuto esto así como está no va a pasar absolutamente nada sin embargo como mi función me está devolviendo algo me está devolviendo este string de acá lo podemos guardar en una variable entonces creamos una variable se llama resultado elevamos y ahí le vamos a guardar lo que
(25:13) me retorne mi función resultado ahora resultado va a tener lo que me dio volvió a mi función y para verlo vamos a usar ahora sí print print resultado hola david si yo acá en vez de retornar esto retorno un número van a ver que también se ejecutó mi programa me va a imprimir ese valor porque lo que retorna mi función se está guardando acá en esta variable esto sirve bastante para cuando queremos procesar datos por ejemplo digamos que queremos crear una función que suma dos números no recibe dos números como parámetros y los suma y
(25:54) devuelve la suma en vez de imprimirla directamente la devuelve para guardarla en una variable y seguir procesando la key vamos a crear una función que se va a llamar suma de suma y esta vez cuando abrimos paréntesis vamos a ponerle nombre a las dos variables que vamos a usar acá es donde vamos a recibir los dos números que queremos sumar entonces recuerden que las variables tienen que empezar en minúscula y no puede empezar con números así que le ponemos número uno a nuestra prima variable y número dos a nuestra segunda variable abrimos
(26:25) el bloque código de esa manera y vamos a lo siguiente vamos a directamente escribir richa para retornar la suma vamos a escribir número 1 + número 2 ok acá nosotros asumimos que el usuario nos pasó en números porque es iluso si el usuario nos pasase una cadena un texto y un número entonces este programa se rompería poder recuerden que no podemos concatenar texto con números a menos que lo transformemos a string entonces acá si el usuario nos pasa dos textos esto va a retornar un texto dos textos junta dos pero vamos a asumir que el usuario
(27:12) nos pasa dos números cuando llamamos a suma como tenemos un riñón lo vamos a querer guardar en una variable entonces vamos a crear otra variable llamada resultado recuerden que esta que está acá arriba ya no existe porque lo comentamos entonces resultado va a ser igual a el resultado de sumar lo que nos retorne suma llamamos a la función zuma y el primer número le ponemos lo que nosotros queramos 15 y el segundo va a ser 5 entonces este valor que está acá el 15 se va a guardar en esta variable temporal que existe solamente dentro de
(27:49) la función y este 5 se va a guardar en esta otra variable temporal que solamente existe dentro de la función lo que hace mi función es sumar estos dos valores de las variables y lo devuelve entonces el resultado se va a guardar 20 para verlo lo que hacemos es como siempre imprimir los greens resultado y van a ver que esto me va a imprimir un 20 bien esto también lo podemos cambiar podemos hacer una suma medio loca y nos da el resultado éstos llaman parámetros y argumentos sé que hay una diferencia pero no sé bien cuál es así
(28:33) que no se las puedo explicar pero lo pueden llamar parámetros argumentos es lo mismo estos argumentos no hace falta que sean sí o sí valores directos digamos pueden ser variables también por ejemplo este puede ser a y puede ser b ya que pueden llegar a marearse un poco y yo supongamos que le dé un valor de 50 y abel es de un valor de 60 entonces la suma de 110 pero yo en vez de hacer a más b lo pasé por una función lo pasé por una función llamada suma y le pase los dos parámetros a ive entonces me va a retornar la suma entre a y b
(29:12) 110 bien lo último que vamos a ver y es muy importante también son los arreglos los arreglos piensan que son como variables que tienen varios elementos y en python se llaman listas así que lo vamos a ver como listas pero de los lenguajes de programación se van a llamar arreglos para crear una lista lo que hacen es primero empiezan como cualquier otra variable le dan nombre a su variable le vamos a sumar mi lista y vamos a escribir igual y acá es lo que cambia vamos a abrir un corchete y vamos a poner nuestros elementos pueden ser
(29:48) números strings lo que sea por ejemplo en esta lista vamos a almacenar el 3 vamos a almacenar el 6 y vamos a almacenar el 5 no entonces esto es una variable que tiene tres elementos pero que es una lista así entonces vamos a imprimir la lista para verla para ver que se haya guardado correctamente utilizando el print y listo lo ejecutamos y podemos ver nuestra lista acá la lista puede tener diferentes tipos de datos aparte de números puede tener strings y puede tener williams van a ver que también se guarda correctamente
(30:30) eso es básicamente una lista y se usa para almacenar diferentes tipos de datos para acceder a cada dato se usa en los índices el primer elemento siempre es el índice 0 entonces el segundo es el 1 y el tercero es el 2 entonces si nosotros en vez de imprimir la lista completa solamente queremos imprimir el primer elemento vamos a describir mi lista 0 van a ver que imprime sobre el primer elemento también pasa lo mismo si escribimos 1 y si escribimos 2 me imprime el tercer elemento bien si nosotros nos vamos de los índices de la
(31:08) lista me asalta un error ya que no tengo nada en ese índice la lista tiene hasta el tercer índice que sería el 2 es un poco confuso pero como arreglador o simplemente recuerden que casi todas las listas y todo eso en programación empieza en el 0 también podemos usar esta anotación para modificar los valores y digamos que queremos modificar el segundo elemento entonces vamos a hacer mi lista 1 va a ser igual a ciao y esto modifica el segundo elemento del ministerio cuando le imprima debería en primer show bien digamos que tenemos una
(31:48) lista con varios elementos no vamos a hacer 1 2 3 4 5 6 7 digamos que tenemos 7 elementos y queremos sumarle a cada uno un valor por ejemplo fijos por ejemplo 5 queremos sumarle a cada elemento de minista 5 lo que voy a hacer es como vimos antes modificar de esta forma mi lista 0 + igual 5 para agregarle 5 al valor ya existente y así sucesivamente hasta llegar a nuestro último valor que sería el índice 6 no 0 1 2 3 4 5 6 siempre hemos mi lista van a ver que les va a imprimir les va a imprimir la lista pero con los valores aumentados en 5
(32:47) en 6 7 8 9 10 11 12 sin embargo hay una forma muchísimo más fácil de hacer este tipo de cosas y acá es donde entran las repetitivas y hay una repetitiva que es muy elegante que es el foro entonces escribimos por acá va a ir el nombre de la variable provisoria sí que va a tomar el valor de cada valor que vamos viendo en mi lista porque está repetitiva va a ir recorriendo la lista de a 1 iba a ir almacenando ese valor en esta variable provisoria entonces por elemento in mi lista abrimos un bloque el código para que
(33:24) funcione correctamente simplemente primero lo que vamos a hacer es imprimir elementos sin para que se entienda mejor vamos a imprimir nuestra variable provisoria para ver que me va a imprimir 1 2 4 5 6 7 pero a diferencia de imprimirlo como lista lo va a imprimir en cada línea diferente va a imprimir uno de los elementos si aunque menos imprime así verticalmente porque cada línea de buda esto si queremos ser lo que queríamos ser antes de aumentar cada valor en 5 necesitamos el índice entonces vamos a crear una variable que
(33:58) llama índice o también pueden llamarla y voy a empezar en cero este índice va a ir creciendo así y al final del foro vamos a querer crecer el índice en uno parecido a como hacíamos con uruguay y qué vamos hacer acá acá vamos a hacer que mi lista y entre corchetes vamos a poner la variable índice que es cambiante empieza en cero y va creciendo hasta que me frene este foro este foro se va a ejecutar por cada elemento en mi lista o sea siete veces se va a ejecutar entonces índice va a frenar en seis porque empieza en cero y
(34:38) va creciendo de a uno entonces es parecido a lo que hicimos antes pero todo como más resumir más compacto digamos no usando esta variable índice mi lista índice va a ser igual a elemento más cinco allí efectivamente guardamos el valor que estamos viendo ahora mismo en mi lista índice también lo que podemos hacer para que sea más correcto digamos en vez de poner elemento acá mi lista índice o mi lista índice más igual a cinco sería lo más correcto y este elemento lo dejamos así como esta entonces ahora para ver que todo
(35:21) funciona correctamente vamos a imprime en nuestra lista lo guardamos y lo ejecutamos y van a ver que efectivamente se modificó la lista como queríamos antes pero en vez de hacer mi lista cero mi lista voló mi lista desde 2003 hasta 6 más igual a 5 lo hicimos en una repetitiva for bien para integrar todo lo que vimos hasta ahora vamos a hacer una función que reciba un array un arreglo o una lista en este caso y devuelve otra lista con solamente los números positivos sí entonces esto puede ser que se les ponga un toque complicado para algunos algunos
(36:11) podrían llegar a marearse con esto pero si me siguieron hasta ahora y estuvieron haciendo los ejercicios traten de copiar esto y y lo copian tal cual está y después de a poco a medida que vayan practicando lo van entendiendo si yo estoy seguro que seguro que lo entienden porque no están complicados y si estuvieron siendo me hasta ahora lo van a entender entonces creamos nuestra función siempre somos de de nombre le vamos a poner dv de volver positivos así se va a llamar mi función no y acá en los argumentos va a llegar
(36:48) nuestro arreglo entonces a rey al arreglo lista vamos a poner a lista no ese va a ser nuestro argumento abrimos nuestro bloque de código con dos puntos y ahora pasamos a procesar que queremos hacer queremos recorrer la lista elemento por elemento como hicimos acá arriba con el form y guardar en una nueva en una nueva lista solamente los positivos si entonces creamos una lista vacía sí que se va a llamar los positivos positivos esta es otra lista que va a estar vacía entonces la lista inicial estamos de la siguiente
(37:26) manera y ahora si abrimos nuestra repetido para recorrer nuestra lista que recibimos con un montón de valores aleatorios para que sea un poco menos confuso acá abajo voy a hacer el llamado de la función de volver positivos y entre paréntesis vamos a pasarle una lista a la lista que queramos por ejemplo 56 menos 580 y menos 25 esto me debería devolver una lista que solamente contenga los positivos y eso lo vamos a guardar en una variable se llama resultado que después vas a querer imprimir para ver como salió si todo esto ya lo vimos así que no
(38:11) debería haber problema entonces inicializa mos nuestra lista vacía y acá hacemos nuestro nuestra respectiva que va a recorrer nuestra lista original por l vamos a brillar en vez de elementos el en que va a ser el elemento actual y lista si abrimos otro bloque de código vamos a preguntar if el en mayor o igual a cero los ceros también me sirven vamos a agregarlo a nuestro nuevo rey entonces vamos a ser positivos punto a penn lo sigo diciendo a rey pero en realidad me refiero a las listas pasa que según bordan similar me refiero a la lista así
(39:00) así que cada vez que lleva rey en realidad me refiero a las listas acamparon si es en otro lenguaje bueno a rey positivo junto a penn elemento l recuerden que el em es una copia de el elemento que estamos viendo ahora mismo por ejemplo al principio valer 5 valer 6 pero no tiene acceso a este valor o sea si nosotros modificamos el en este valor de acá no se modifica l es una copia de esto así que positivos punto append y agregamos el valor de l esto nos va a guardar en esta lista lo que son solamente los valores positivos
(39:39) y esto que estamos haciendo nosotros acá es un algoritmo tal vez es un toque avanzado para alguien que está viendo solamente las básicas pero los los animo a que a que lo vean bien de a poco y que lo puedan entender y eso es todo para esta repetitiva así que simplemente lo que hacemos ahora es retornar el resultado positivos esto que viene acá se va a ejecutar varias veces las veces que sea necesario en este caso cinco veces porque tenemos cinco elementos en lista por cada elemento en lista preguntamos si el elemento es mayor a
(40:16) cero entonces lo agregamos a positivo si es mayor a cero sino no hacemos nada y pasamos a siguiente le mentó y esto me va a ver el rey con solamente los valores positivos y esto va a ir a cabo en resultado y nuestra consola va a imprimir el resultado lo grabamos y lo ejecutamos y deberíamos recibir 5 685 680 si nosotros le pasamos un valor un array de solamente de números negativos vamos a recibir en la red y vacío y si nosotros le mandamos una lista con solamente valores positivos vamos a recibir una lista idéntica lo
(40:55) que les quiero comentar es que no le den demasiada importancia a la sintaxis en este vídeo porque para cada lenguaje de programación la sintaxis cambia un poco nuevo por ejemplo acá para abrir bloques de código en los otros lenguajes por lo general se usa en estas llaves y acá en python no usamos los dos puntos pero en cuanto a lo que es básico básico es todo lo mismo digamos las bases y las van a encontrar en cualquier lenguaje de programación las repetitivas van a estar los bailes las variables la función y es
(41:32) todo lo que vimos hoy los arreglos también todo lo que vimos hoy lo van a encontrar cualquier lenguaje de programación si entonces no le den tanta bola a lo que es la sintaxis si llegas hasta acá ahora puedes aprender el lenguaje que se exporta es la base de la programación sabes lo que son las variables sabes lo que son los condicionales lo sabes los arreglos etcétera sólo están repetitivas y lo más importante sabes la consola un poco sabes programar el nou para esas cosas que la verdad lo van a distinguir de los
(42:05) demás porque siempre desde un principio mucha gente simplemente se simplemente se acostumbra a usar un ide pero eso no es lo básico básico digamos pero bueno espero que este último ejemplo se haya entendido si no se entendió y tienen dudas pueden unirse al grupo de edad y charlamos también los martes 9 pm hacemos directos de programación acá en el canal así que eso también lo vamos a hablar ahí otros recursos para aprender programación son google libros cursos hay un montonazo de recursos lo que yo les recomiendo es que
(42:40) lean libros son lo más completo que hay los libros de programación no sé si hay muchos en español pero en inglés hay muy buenos libros de programación como por ejemplo los de head first y si no los cursos también están muy buenos el tema es que son pagos si buscan un recurso gratis les recomiendo frico camps o hacer según buscan gratis que encuentren por ahí habló mucho explicó camps en en mi canal porque yo lo uso para el html css y javascript así que les dejo el vídeo acá arriba sobre freak ocampo sobre los otros recursos para
(43:15) aprender programación que hay otro buen recurso para aprender programación en mi canal así que suelen suscribirse y darle a la campanita solense dejarme un comentario sobre si les sirvió se perdieron si pudieron realizar todo y si entendieron el ejemplo final y compartan lo con los amigos que les interese aprender programación les dejo acá para que se suscriban y haga otros vídeos que les pueden llegar a interesar nos vemos la próxima gente [Música] [Aplausos]

