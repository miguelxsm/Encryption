Introducción a la Programación BACKEND GRATIS - YouTube
https://www.youtube.com/watch?v=sb01BSWyRMM

Transcript:
(00:00) qué tal mi nombre es héctor del león y en este vídeo vamos a ver una introducción al back-end si tú tienes curiosidad por adentrarte al back en este vídeo te puede servir vamos a trabajarlo con punto net pero no importa si tú vas a entrar en python javascript java etcétera vamos a ver conceptos del back-end que se repiten en estas otras tecnologías así que quedarte aquí si eres nuevo por aquí podernos suscribir a un pulgar arriba ayuda bastante pero hoy quiero presentarte jet court una herramienta muy buena que descubrí hace
(00:26) poco se trata de un site para el desarrollo de integraciones y automatización es pensado para esos procesos que son demasiados complejos para una herramienta no code es como un xavier pero para de velluters es la alternativa perfecta para desarrolladores que se enfrentan a una integración compleja y prefieren escribir unas líneas de código en lugar de pelearse con multitud de drag and drop y gráficos de ejecución complejos al final jep coach te da flexibilidad y te permite ser más productivo ya que programando con llave escribía haciendo
(00:51) uso de las integraciones que la plataforma incluye o book the box puedes crear mucho más en menos tiempo al olvidarte de toda la capa que un the bobs necesitaría para arrancar un proyecto desde cero todo funciona en un entorno server les escribes tu código desde un navegador y lo ejecuta directamente en el cloud de jacobs sin necesidad de configurar despliegues o gestión de dependencias conectan prácticamente cualquier app o servicio redes grapel snowflake where is my círculo efe cv l puedes usar streams de datos transacciones cachetes gestión de
(01:16) errores o incluso módulos para reutilización de código web code se integra perfectamente con otros sistemas ya que además de poder ejecutar los procesos manualmente se puede programar ejecuciones periódicas o configurar web cox que permiten invocar ejecuciones desde otros sistemas tienen una documentación súper completa y un plan gratuito para que puedas crear tus primeros procesos te recomiendo que te registres en el enlace que está en el primer comentario fijado y también a que le eches un ojo a su blog donde
(01:38) presentan casos de uso que demuestran la potencia de la plataforma ahora si vamos al vídeo esta es una introducción al back-end por lo cual vamos a ver ciertos conceptos que son básicos tú como programador back-end que son básicos y a veces yo he visto que muchos programadores llegan al código directo y no entienden estos conceptos que son muy fáciles tampoco es que sean complejos un programador back-end prácticamente va a trabajar con lenguajes de programación que está en el backend por ejemplo si java php javascript etcétera entonces el punto es
(02:09) que estos conceptos se van a repetir no importa el lenguaje o tecnología no importa el framework tampoco entonces aquí lo que vamos a ver es lo siguiente por ejemplo el programador back y más de una aplicación que está en el backend que esta aplicación basa en realizar procesos estos procesos van a recibir solicitudes van a hacer algo y van a van a regresar algo estos procesos pueden venir de una aplicación que puede ser de escritorio puede ser de móvil puede ser una aplicación del navegador puede ser un videojuego etcétera el punto es que
(02:40) el back end lo que va a centralizar es eso va a centralizar recursos va a centralizar procesos y va a hacer un punto de intercambio de información con la aplicación esta aplicación puede estar instalada en muchísimas y en muchísimos celulares puede estar el navegador el cual entre muchísima gente pero él va a ser uno bien ahora qué es lo que hace la aplicación cuando va al back end hace una solicitud del tipo protocolo http que es un protocolo en el cual se pueden transferir el contenido html xhtml etcétera este protocolo
(03:12) prácticamente ya te hace todo este protocolo tiene un conjunto de información tiene un header regularmente y un body no regularmente tiene un jefe una cabecera y tiene un bat y esto prácticamente en el cdt moneta data la cual tiene información por por ejemplo necesitas autentificar te va a ir ahí la información si tienes un toque y baile esa información en el bad iba a ir información cuando estamos registrar un nuevo usuario un nuevo una nueva información por ejemplo tú te registres un sitio web y esa información
(03:42) va a ir por en el baile tu te registras tú agregas un artículo a agregas información a tu perfil de algún sitio web esta información todo lo que se ha agregado baile en el valle bien y en el heather van a venir información hasta del lenguaje por ejemplo estamos en español inglés lo que sea va a ser información metadata al badín bien esto va a ir por http pero http tiene otro conjunto tiene unas categorizaciones llamadas verbos estos verbos pueden ser tipo get que es cuando tú vendes por get es para obtener información cuando
(04:15) mandes por post es para introducir información por wood es para editar y por delete es para bueno más como escribo es para borrar bien pero no son los únicos verbos son los más comunes quizás y hay otros verbos como merge patch move grace etcétera pero estos van creciendo no es como que estén fijos http es un protocolo tan flexible que permite agregar nuevos verbos según se va a requiriendo en el avance de la tecnología así que seguramente vas a ver estos cuatro estos cuatro verbos pero hay muchos más dependiendo situaciones
(04:49) ahora una vez que tú solicitas salvo el back en el paquete va a dar un código de respuesta que también tiene una cabecera y tiene un bar y este código de respuesta se dividen en cinco pueden ser del cien a cien al ciento y tantos pueden ser de 200 300 400 y 500 esto si tú eres programador front-end esto te va a dar una idea de que lo que pasó si es un 100 es info es porque lo que te está respondiendo el back end es solamente respuesta informativa si es un 2 y entonces por qué se ha hecho correcto lo que está solicitando ya sea una
(05:26) inserción de nueva información obtener información etcétera si es un 300 es porque el servidor te está pidiendo una redirección ahora sí es un 400 es porque tú estás mandando algo mal ya estás mandando lo mejor un correo electrónico con una validación mal éstas no están mandando una información que requerida etcétera si es un 500 es porque ahora es culpa del back en algo pasó en el market que pudo haber pasado en el back end a lo mejor el bajen se conecta una base de datos y esa conexión pero falló por ejemplo eso pudo haber pasado y es
(05:56) responsabilidad del back end y eso está regresar un 500 un error interno del servidor o la mejor imagen va aún a un almacenamiento de archivos de c3 y también la mejor fallo a lo mejor porque él va que no tiene acceso en ese momento y es un error interno del servidor un 500 se puede decir bien entonces tenemos que una aplicación acción azul es tu tipo http por un tipo de estos verbos él va que iba a decir a ok quieres obtener información united al de información quieres meter información deja la meto y te digo si pasó correctamente quieres
(06:26) editar quieres eliminar etcétera y yo te voy a dar un código como back-end dependiendo que haya pasado si fue todo correcto te va a dar unos cientos unos cientos unos y creamos algo si hay una evaluación errónea te va a dar un 400 y algo si me pasó algo con una excepción te va a dar un 500 entonces como front-end dices ah ok mira este error ya puedo mostrarle algo al usuario por lo menos tengo una idea de lo que pasó y ya con estos dibujos todos pedorros vamos a ir ahora sí al código pues lo primero de todo esto vamos a hacer un proyecto
(06:57) vamos a verlo en visual studio 2022 no importa si ustedes va a trabajar en con python con java los conceptos aquí simplemente van a ser muy parecidos de hecho el objetivo de todos mis vídeos eso entender ese concepto que tú no importen lenguaje de programación o sea lo vas a poder replicar porque lo entendiste entonces vamos a comenzar creando un proyecto en el caso de lo que es punto net tenemos muchos tipos de proyectos para sistemas web o para sobre todo para hacer backend pero yo voy a instar a crear un proyecto del tipo más
(07:28) sencillo que es un tipo que se llama vacío es prácticamente un concepto nuevo agregado llamado minimal que no es propio de punto neutro puedes encontrar en muchos otros tipos de frameworks yo simplemente al ponerlo vacío se va a crear un tipo de ese tipo de proyectos no va a poner mi proyecto intro back en siguiente y esta se va a crear el proyecto regularmente cuando trabajamos va que vamos a trabajar con un framework es decir que ya vamos a tener una estructura base con la cual trabajar este framework nos va a dar sobre todo
(07:57) cómo vamos a crear en points y éstos en points cómo se van a lavar cómo van a responder dependiendo ciertas situaciones vamos a tener también un conjunto de bibliotecas o clases las cuales se van a conectar a recursos externos pueden ser una base de datos pueden ser sistemas en cloud pueden ser otros bajen porque no y mira que aquí ya tenemos la base de este proyecto muy sencillito no hay mucho que aprender prácticamente esto lo que es es un en point que viene por el verbo dieta es decir si usted me manda por get algo eso
(08:30) tuyo te va a regresar hola mundo y aquí podemos observar que si vamos al navegador directamente a la url generada por defecto vamos a tener un hola mundo ahora yo regularmente esos frameworks yo puedo especificar le el el nombre de miguel y el por el puerto que va a correr por ejemplo aquí tenemos la opción que en round aquí podemos ponerle esta paz podemos ponerle por donde va a correr yo aquí voy a dejar que corra por lo que el host 2.
(08:56) 666 6 el número ese bonito bien ya tenemos yo quiero crear un nuevo método aquí el cual sea del tipo get pero quiero ahorita simular un recurso vamos a crear una clase aquí una clase la cual va a simular un recurso vamos a llamarla repositorio y aquí mismo voy a crear otra clase que se llame cervecería y va a tener una idea y va a tener un nombre vamos a crearlo aquí una clase que se llame cervecería tiene una idea y un nombre voy a crear un listado de cervezas aquí dentro del repositorio y vamos a crear un método que obtenga sea cervezas un método que crea una
(09:29) obtenga esas cervezas vamos a tener un tipo list cervecería hay por medio de get road y ahí está cervecerías y vamos a poner otro método que obtenga una cerveza en específico a la mejor aquí hay una cosita que se te va a cerrar a este método find lo que hace es buscar en una listado por un campo en específico estamos recibiendo un campo por ejemplo este método recibe un campo que se enteró y por ese campo nosotros tenemos en todas las colecciones de share llamado find que lo que va a hacer es encontrar un elemento de esa lista que
(10:01) concuerde con lo que estamos igualando esta eres práctica esto es una función de expresión lambda un error función en javascript es una expresión lambda una función anónima la cual recibe un parámetro llamada y yo le estoy llamando r este ere tiene prácticamente los campos que tienen la clase cervecería por lo cual tiene la ddi y yo voy a comparar con el seib y el lady que estoy recibiendo en el método bien ya esto lo que tenemos que ir aquí esta clase repositorio solamente es algo para simular un recurso vamos a programa
(10:31) vamos a crear un método y otro que sea del tipo get al cual vamos a acceder por medio de brouwer y aquí y vamos a ponerle la funcionalidad a la derecha que lo que va a ser esta funcionalidad prácticamente es poner una función anónima la cual haga un nuevo objeto del tipo repositorio si te fijas aquí no me lo agrega pero vamos a darle contra el punto y nos va a agregar el space adecuado y este tiene a su vez un método llamado get brown con brown y se instauró primero bien toda esta manera pero ya vamos a tener toda
(10:59) esa cerveza cervezas que tenemos en este listado que están simulado solamente data vamos a correr esto estaba en un conflicto el puerto este vamos a quitar la horita así vamos a dejarlo vacío vamos a correr lo vamos a entrar directamente ahora a la ruta aquí diagonal que se llama browser o cervecería vamos a entrar aquí y vamos a ver que no está bueno aquí esto es una advertencia pero bueno me había equivocado he quitado el puerto a esta podemos implementar me sería obregón y aquí ya tenemos el jason mira tenemos ya el
(11:31) formato los los elementos que tenemos en la clase ya pero un formato jc ahora si yo voy a un una herramienta con la cual pueda yo hacer estas este manejo sustituyó para probar mi back-end yo te recomiendo postman pero hay muchas más postman te va a servir para hacer pruebas de tuba que por ejemplo aquí yo he puesto la ruta tal cual y aquí vamos a ver otras cosas más por ejemplo aquí vemos el estatus el código de respuesta que está revisando navegador recordemos que te está regresando el backend no al navegador recordemos que los códigos de
(12:04) respuestas nos dicen mucho aquí nos está diciendo que son 200 por lo cual es una solicitud que fue exitosa y aquí tenemos la información fíjate aquí está la información en el bad y tenemos un conjunto de encabezados también que no está dando metadata de la información extra pero aquí lo que nos interesa es el bad y mira en bad y viene ahora qué pasa si yo quisiera ir a un recurso en específico quiero ir un recurso en específico vamos a copiarlos esto bueno vamos a escribir lo vamos a poner que va a ser por el verbo get
(12:30) vamos a tener kimba map get vamos a ponerle la siguiente ruta vamos a poner la misma pero con nada diferencias que vamos a recibir un elemento un elemento que va a ser el aire por el cual vamos a vamos a regresarle el elemento que nos está solicitando va a ser por get y vamos a poner la funcionalidad aquí una función anónima que va a recibir ese y de al momento que tú pones aquí esto es regularmente es parecido en todo de hecho al arab él es casi idéntico que tú pones esto de esta manera y esto automáticamente transforma en el
(13:01) parámetro que tenemos aquí a la derecha de la función vamos a ver aquí y aquí vamos a especificar lo que vamos a hacer con el seib y recordemos que en la clase repository tenemos dos métodos tenemos uno que va directamente a entregarte todo listado y otro que va directamente con find a lady que estamos recibiendo entonces vamos a utilizar ese método ahora aquí vamos a ponerle lo siguiente vamos a obtener un elemento una cerveza y esta cerveza de cervecería la vamos a obtener a partir de un objeto del tipo repositorio de poner la palabra new
(13:36) porque necesito crear un objeto y este objeto necesito invocar el método y obtener cervecería mandándole el aire ha equivocado acá vamos a mandar la de aquí y de esta manera nosotros vamos a obtener un elemento o no podríamos obtener algo por ejemplo qué pasa si yo aquí pongo vamos a ponerle aquí está vamos a correr esto y yo mandándole la misma ruta pero con un elemento que extra 11 voy a obtener la cerveza requerida fíjate que la 1era es a minerva quiero mandarla el 3 para que me regreso la sal muy claros que es
(14:09) una cerveza de 14 grados de alcohol es muy buena de austria mira ahí la tenemos sal mezclado pero qué pasa cuando yo pongo una idea que no existe que es lo que va a pasar aquí mira me está regresando un 200 y eso no es correcto aquí lo correcto no es correcto en sal nada raro pero aquí lo correcto no es correcto ya que él me está diciendo que todo está correcto pero no tenemos nada es decir no tenemos un elemento bueno pues hay un error más bien hay un código de respuesta que le puede decir al front-end algo más en específico por
(14:39) ejemplo que no se encuentra pues aquí lo que vamos a hacer es que vamos a poner un ternarios y esto es igual al 1 no me regrese es el elemento regresa me nosotros tenemos en sí ya tenemos una clase llamada results que tiene un conjunto de métodos los cuales te van a dar un estatus de respuesta tenemos uno llamado por ejemplo no found y es de manera nosotros ya sabemos que no se encontró el recurso en el fonden ya no necesitamos ponerle un mensaje o ya no se encontró el recurso directamente el código de respuesta te va a decir eso y
(15:09) en caso contrario podemos mandarle que sea todo ok piense ok es un 200 es decir que todo está bien y eso que puede recibir una clase un objeto que se va a realizar en json repositorio de comando se llama brewer y está bien de esta manera nosotros vamos a evaluar si esto es nulo pues vamos a regresar que no se encontró y en caso contrario vamos a regresar elemento con un código 200 aquí va a ser un código adecuado para cuando no se encuentren vamos a correr esto y ahora sí vamos a algún elemento que no existe por ejemplo
(15:46) este 30 vamos a encontrar un 404 que es el código de respuesta adecuado para la situación ya no este 404 de llega al fueron en la mira es que no está el recurso ya puedo mostrarle al usuario sabes que el recurso no está no existe etcétera pero ya tienes una idea con este mismo código el código ya te está diciendo qué es lo que pasó por es importante en nosotros en nuestras respuestas como programadores back-end analicemos qué es lo que está pasando y dependiendo la solicitud vamos a regresar todo bien o vamos a regresar 1
(16:16) found en este caso hasta aquí hemos visto algo simulado pero ahora hay que ser algo más realista el back end también tiene esa responsabilidad de si hay una base de datos un punto central dónde está la información podemos ir a esa información y regresarla en lugar de yo era esta clase que está aquí toda fija y compilada y no puedo modificarla vamos a ir a prácticamente a una base de datos en los en el back in existe el concepto bueno en todas partes no solamente imagen siempre que utilices base de datos existe el concepto de rm
(16:44) el rm prácticamente es una forma una 1 rm es una técnica está técnica lo que te va a permitir es convertir a mapear tu base de datos relacional a un una estructura de clases con las cuales vas a poder crear objetos y estos objetos vas a tener un conjunto de métodos con los cuales vas a poder mandar información en la base de datos no vas a tener necesidad de utilizar sql como tal no te digo que no aprendes sql de hecho como back-end yo creo que es obligado a aprender sql y esos son las cosas que se van haciendo
(17:19) de repente como malas prácticas dejar aprender solamente de mí y no aprender sql bien pero al final de cuentas lo de día a día vas a utilizar un nueva rm que va a ser esta técnica con la cual vas a poder trabajar con la base de datos directamente con objetos y en los frameworks regularmente ya tienen 9 m por ejemplo el árabe el de demostrarlo cuenta en puntos no tenemos entity framework en python o por ejemplo en django tenemos sql hay queme en java tenemos hibernate entonces todos los lenguajes de programación y sobre todo
(17:51) si estás utiliza un framework casi seguro ya tiene uno de rm ahí porque son súper útiles ahora como -utilizando rm en punto net vamos a instalar lo que independencias pasarle clic y vamos a ir a administrar paquetes nuggets vamos ahora examinar y ponemos en tití framework en este caso voy a instalar el de sql server aquí vamos a instalar este y en punto donde tenemos otro extra que podemos trabajarlo con consola entonces qué vamos a ponerle tools y vamos a instalar el las herramientas necesarias para consolar entity framework corp
(18:20) ahí está vamos a instalar y listo ya tenemos instalado lo necesario para trabajar con el bm aquí lo vamos a ver en paquetes mira están en tití framework sql server y tools bien ahora necesito una base de datos para conectarme aquí yo ya tengo una base de datos sql server si quieres un curso de secular server está en otro un curso que es gratuito busca sqlserver para novatos hd león te va a salir el curso bien aquí tenemos una base de datos la cual tiene tres tablas esta base de maputo pop y aquí tenemos una tabla que se llama
(18:48) cerveza esta tabla que se llama cerveza tiene estos campos que son prácticamente ya tenemos información ahí tenemos un campo que se llama nombre otro que se llama brandy y los browns tenemos un conjunto de marcas de cervezas las cuales vamos a tener una idea esta idea tenemos la marca modelo minerva geringer 'modern times' y éstas tienen su aire y con este aire hacemos referencia pues obviamente a este campo que tenemos en la tabla cerveza bien esto es lo único que necesitamos de información de esta
(19:14) base de datos donde está solamente esa información del citas tú tú puedes crear tu propia base de datos para seguir con esto y simplemente es el concepto tenemos información que esta central es una base de datos vamos a conectarnos a ella desde el back y para conectar dos necesitamos regular cuatro cosas necesitamos el nombre del server en este caso entonces para esta conexión necesitamos el servidor aquí en el ser el management studio tenemos aquí arriba héctor la diagonal invertida seco l'express necesitamos un usuario un password
(19:41) regularmente pero va a conectar por la autentificación de windows que la tengo y también necesitamos regularmente a veces un puerto ese puerto puede cambiar dependiendo la situación pero los puertos de la base a tus a veces vienen por defecto regularmente por ejemplo el de sql server es 1433 el de maíz circules 3306 entonces regularmente como si vienen por defecto vamos a tener necesidad de mandar a ese puerto a menos que venga por otro ya tenido esta información necesita tenemos el bm instalado ya tenemos una base de datos
(20:12) ya tenemos la información para conectarnos nos queda mapear eso en uno de rm para el mapeo regularmente vamos a utilizar comandos así que no tengan miedo a los comandos no es tampoco que sea difícil bueno aquí lo que vamos hacer es una carpeta nuestro proyecto que se llame models para que se guarde nuestro rm vamos a que agregar voy a agregar esta carpeta llamada models que está aquí y aquí en la línea de comandos aquí abajo sí no abrir herramientas del té puede seguir la siguiente herramientas de ministro de paquetes
(20:39) nuggets y está de consola del metro de paquetes te puede servir bien aquí atendiendo esta consola que está aquí vamos a lo siguiente vamos a escribir el nombre de el comando que ese es carl food el guión debe contexto al cual como estoy escribiendo seguido de espacio y seguido vamos a inscribir la cadena de conexión por ejemplo el servidor lo vamos a especificar con la plaza server igual a ese sector la s cuales este cual després que es mi el nombre mi servidor el tuyo puede ser distinto separado por punto y coma el nombre de
(21:10) nuestra base de datos en el caso mío es pop o pop y seguido yo aquí tú puedes poner tu usuario ser estar tu password es tal por ejemplo los usuarios y password al y enseguida ya estaría lista tu cadena de conexión en cuanto a la conexión nos falta poner otras cosas pero en mi caso yo como tengo identificación de windows vamos a ponerle troster conexión y ya va donde si tú pone el usuario de conexión y aquí enseguida vamos a poner el proveedor de entity framework que se llama microsoft punto entity framework core ese puede
(21:44) ser ver qué hace que instalamos aquí arriba mira este que está aquí y bien y enseguida de esto vamos a ponerle esto es opcional yo voy a ponerle la salida a donde yo quiero que se guarde yo quiero que se guarde la carpeta models por lo cual hay una un parámetro que se llama output dir y vamos a especificar le con not pulir con el lyon espacio la carpeta que se llama models leamos centre y listo esto ya está listo ya se envió la base de datos fíjate aquí en la carpeta models tenemos unas clases que yo no hice
(22:14) sesiones automáticas una clase por cada tabla más una extra que se llama como tu base de datos seguido la palabra contexto ojo cuando ejecute es este comando que acabo de ejecutar es call fall debe contexto tú aquí tienes que tener esto compilando por ejemplo no puede dejarlo así que te marcó un error aquí por ejemplo en este caso si yo ejecutar el comando uno no se ejecutaría porque está fallando me falta el punto y coma lamentablemente si bien aquí hay otra pregunta que me dicen cómo puedo si tengo un nuevo cambio la base 2 cómo
(22:44) puedo volverlo a ejecutar basta que componen pongamos todo lo mismo todo el mismo comando seguido de un parámetro llamado de esa manera se va a sustituir nuevamente toda la base datos bien tenemos dos datos informativos de este framework ya que es un error muy común que a veces no compila y no les funciona el comando etcétera pues y la otra cosa es de cómo puedes tú volver a rematar la base datos pues ahora sí vamos a continuar ahora yo quiero ser un método el cual vaya por las cervezas vaya por esas cervezas y directamente vaya a la
(23:19) base datos entonces vamos a crear un método aquí igual tipo get y este tipo que es vamos a ponerle que no reciba nada se llama se llamara byrs vamos a ponerle acá que es decir la función punto y coma y listo aquí dentro vamos a poner lo siguiente yo para ir a necesito regresar una listado de cervezas estas cervezas esa clase se creó dentro de models pasarle contra el punto nos va a agregar leyes page bien eso se creó dentro de models y vamos a retornar lo en este apartado de abajo pero podría ser el caso bueno aquí vamos
(23:49) a revisar todas las cervezas ahí está bien ahí están las cervezas ahora yo como un conector al al institut framework rm utilizo pues basta con que pongamos using para crear un contexto esto lo que hace using them sichar es invocar directamente el método this post que es lo que hace dispuse es liberar la memoria para evitar nosotros meter directamente ejecutar el método dispuse esto lo hace por día bien vamos a hacer un objeto del tipo pop con texto pop con texto es una clase que se creó automáticamente cuando un
(24:20) papel entity framework es decir es esta que está aquí mira yo no la cree se creó solita bien entonces esta clase lo que va a hacer es todo el contexto esto es la conexión en la base a todos hace todo bien aquí dentro vamos a ponerle lo que necesito yo quiero llenar estas cervezas que están aquí entonces vamos a poner virus es igual a debe punto la tabla se llama bills y punto aquí tu lista y de esta manera ya hicimos todo lo necesario para la base datos ha sido fácil porque es bueno saber 1 dm y no por eso es
(24:50) nuevo no aprendas sql sivasspor back-end es importante que aprendas sql a pesar de que manejes el o rm es importante que aprendas sql y listo mira ejecutó el método lo metimos por get it' y fíjate que está el verbo get lo metemos byrs y ahí está nuestra información en la base datos esto está en la base de datos aquí puedes observar lo mira ahí están las cervezas estas tres y ya fuimos a la base datos así de rápido así sencillísimo hay otro concepto que tenemos que aprender en el back end y es importante en todas beltrán en back-end
(25:20) pero a es muy aplicado en los frameworks que es la inyección de dependencia la inyección dependencia prácticamente quitar la responsabilidad a una clase de la creación de un objeto el cual la compone es decir a veces tenemos clases que tiene otros objetos internamente y su creación no debes saber tú cómo se crea ese objeto sino que tú debes encontrar un modo de que ese objeto ya esté ahí creado de alguna forma muchas veces trabaja con interfaces para ese propósito inyección de dependencia en los frenos regularmente ya tiene una herramienta
(25:49) para trabajarla por ejemplo yo este objeto debe siempre se va a crear de esta manera entonces yo puedo evitar toda esta línea a cada rato estar escribiendo y escribiendo escribiendo haciendo una inyección de dependencia es bien sencilla vamos aquí arriba y esto aplica en todos los frameworks es la mejor lanza en contra del nombre distinto por ejemplo en la árabe él se llama service providers ya caps ella prácticamente el objeto como tal lo metemos en build punto wílder punto servicio son punto de debe context y ya está ya con eso es todo ya
(26:25) ponemos el tipo que es un pop un context y ejecutamos la función y ya está que es lo que hace que es lo que estamos haciendo con esta línea lo que estamos haciendo es darle la posibilidad la capacidad de que todos nuestros en points puedan hacer uso del objeto que hemos aquí puesto es objeto nosotros lo podemos llamar como queramos pero al momento que nosotros especificamos este tipo automáticamente lo vamos a obtener vamos a que el método bills por ejemplo mira cómo va a quedar reducido cuando hago lo siguiente pongo aquí pop
(26:55) context debe como está inyectado puedo ir por él en los parámetros esto tú no lo vas a mandar en la solicitud esto automáticamente lo obtiene de lo inyectado y aquí quitamos esto quitamos esto quitamos todo esto quitamos este return y esta ya nos quedó nuestro mismo método pero más sencillo todo lo que estamos viendo ahorita estamos trabajando con el verbo get las solicitudes http van tienen verbos sólo hemos obtenido con el verbo get pero vamos a hacer ahora algo con un verbo post y para eso nuestro frame ya tiene
(27:31) un método para un para crear el points del tipo post vamos a ponerle más post aquí vamos a poner la url que quiero yo quiero que sea la misma url vamos a recibir lo que esté inyectado el lo mismo el contexto perote y vamos a recibir la data de una cerveza la data de una cerveza vamos a recibir la del tipo beer este bien acuérdate que yo no le cree ese mapeo con el bm y aquí abajo vamos a ponerle que se agregue esa cerveza a la siguiente manera debe punto virus punto de tal cual no toca ser un ínterin tú así tal cual pero no por eso
(28:02) no aprendas sql recuerda aprenderse culé si vas al back-end ahora aquí esto lo que hace es agregarlo al contexto pero no ha mandado la base de datos para mandar la base a todo tengo que ejecutar un método llamado shape change y de esta manera nosotros invocamos a james ya se manda la base de datos ahora lo único que vamos a retornar aquí es igual vamos a retornar un código un código de respuesta con results aquí no quiero ejecutar ok hay otro código llamado created que nos va a regresar un 201 y este es la ventaja que tenemos con
(28:32) crédito es que podemos regresar le la url al front end de cómo puede invocar en la información recién adquirida es decir le podemos decir al front es mira si quisiera la información invoca me esté en point y ese en point invoca de esta manera mándame byrs y mándame una idea por ejemplo aquí podemos ponerle que es parecen point que no he creado mándame el aire y de esta manera nosotros le estamos diciendo al fonden que si quisiera esa información en un futuro mande la palabra a vivir diagonal el aire del adelaide y que acaba de recibir en
(29:07) creado en la base datos suelta saber que la dice regresa bien aquí teniendo esto el apartado nos falta ponerle el objeto que vamos a regresar que va a ser la cerveza recién creada a la base de datos y aquí ahora en post man vamos a mandarlo por el verbo post pero en el bad y vamos a mandar la información de una en el bad y vamos a mandar la información de la nueva cerveza yo quiero esta vamos a poner aquí si esa dunkel de la marca 3 vamos a mandar lo vamos a ver que aquí se ojo he puesto que sea el tipo road o crudo aquí
(29:35) el body y que es el formato jason es importante argumentó que yo invoco a king sent vamos a ver que esto es lo que va a hacer es crear un nuevo elemento en la base de datos y se nos ha retornado el aire y que se haya generado la base datos mira pero otra cosa el header de respuesta aquí vamos a verlos heathers vamos a ver que tenemos un atributo llamado location que nos ha regresado la url que yo puesto en el método de respuesta es decir que tenemos una forma a partir de la información de metadata aquí mismos heathers de obtener
(30:04) como podemos en un futuro obtener esa información es decir yo soy front-end y quisiera saber oye pero voy a creer en la cerveza deja voy por esa información ahora cuando un futuro podremos hacerlo esto es informativo extra solamente ahora acá tenemos el baby fíjate y vamos a ir a la base datos y aquí vamos a refrescar y vamos a ver que ya tenemos un nuevo elemento con la 16 eso así está prácticamente ya metiste la información avanzados por medio de un en point ahora también tenemos aquí la posibilidad de trabajar con el verbo put para editar
(30:37) información prácticamente podemos ser lo siguiente vamos a recibir aquí vamos a recibir el aire en la url en la siguiente manera mat putt y vamos a ponerle aquí el pla cerradura vamos a ponerle la función con la cual vamos a trabajar vamos a trabajar con el aire que estamos recibiendo en la ruta vamos a trabajar con el contexto que está inyectado y vamos a poner aquí debe y vamos a ponerle la funcionalidad aquí y ahí está lo que va a permitir esto es que nosotros por medio de put escribiendo vivir si mandan un lady
(31:08) vamos a poder editar información pero para eso también necesitamos recibir la cerveza entonces aquí vamos a poner las cerveza aquí al final vamos a recibir una cerveza la voy a marvin request vamos a obtener la la cerveza a partir del contexto vamos a encontrar la vamos a poner lo es de manera asíncrona esto qué diferencia hay con con esta manera que tenemos a james por ejemplo aquí también hay un método llamado safe sing sing por ejemplo qué diferencia hay eso o con un find normalito qué diferencia hay cuando trabajamos con recursos externos
(31:44) desde el backend las solicitudes no son en tiempo o instantáneo una base datos podría estar en otro lugar por lo cual hay milisegundos de cuánto tú solicitas algo de información te responde entonces podemos trabajar de manera asíncrona basta con que pongamos en este método aquí arriba y zinc y esta manera ya cambiamos esto que trabaje de manera síncrono esto nos va a dar una ventaja por ejemplo aquí nada más este debe porque está muy oscuro bien aquí la ventaja que vamos a tener es que cuando trabajemos de manera
(32:13) síncrona por ejemplo el método se llamará i think ya está creado no lo creo lo que va a hacer es que aquí no va a pasar de esta línea hasta que tengas la información de envío eso es importante porque si yo quisiera evaluar en la información de vida aquí abajo y especificó que civiles null regresarme que no se encontró podría ser que esta información todavía no alcanza llegar y esté trabajando en esta línea podría ser y lo que va a pasar es que vas a tener un proceso erróneo lo que haces aquí con el la white es esperar que la
(32:46) información en la línea de código pase a esta de abajo hasta que sí por si tengas la información de en vivo sea nulo no sea nulo toda esa manera podemos trabajarlo sobre todo en cuando hacemos solicitudes a otros recursos podemos seguir también haciendo lo contrario por ejemplo podemos no hacer una white posible trabajando con eso y podemos ir haciendo otras cosas aquí abajo y así hasta cuando te estén podemos ir aprovechando ese tiempo y acá abajo ya podemos poner el agua de lo que estamos esperando eso es otra de las cosas que
(33:14) se pueden hacer aquí bien vamos a regresar cómo estaba esto y ahí está ahora que vamos a hacer más en el editar pues aparte vamos a hacer lo siguiente y es una propia decisión suya de hecho con hasta php ya tiene algo como esto podemos los fibers se llaman a partir la versión 8.1 nadie está yendo a la sincronía por todos lados entonces no es algo propio escuchar la sincronía bien ahora vamos a reemplazar los elementos que tenemos en el modelo que esto es fuimos la base datos aquí esta mañana vas datos tengo la información la vas a datos vamos a
(33:43) reemplazarlo con lo que estamos obteniendo en la solicitud aquí en este apartado bien que viene en el vale ahora teniendo eso ya reemplazado lo que vamos a hacer es guardar los cambios en la base de datos de manera asíncrona fíjate ahora estoy ejecutando save change 65 y aquí estaremos aquí donde lo ejecuten zinc y zinc aquí está mayo bueno puedes hacerlo así pero yo te recomendaría hacerlo de esta manera asíncrona mente que cambiaremos el método por el zinc así lo cambias aquí a 5 prácticamente no más aquí basta con que pongamos agua y
(34:13) cambiemos el método por 666 zinc y ya está ya lo cambiamos asíncrono todo esto bien ya teniendo esta parte lo que voy a retornar en este punto es no va a retornar contenido pero va a retornar que fue exitoso para eso tenemos en la clase results 1 content vamos a ejecutar esto nos dirigimos a postman aquí le ponemos en put ponemos la ruta ponemos el aire que queremos modificar para ser el 6 que es el último que agregamos aquí para ver un poco la diferencia vamos a ponerle done que el 2 y vamos a hacer la misma marca vamos a
(34:42) ejecutar esto y vamos a obtener una respuesta a todas las respuestas del rango de 200 son correctas pero vamos a obtener una que no tiene contenido es decir es correcto pasó todo bien es exitoso pero es una 204 es decir no tenemos un contenido de respuesta solamente le indicamos al from en que todo estuvo bien pero que no le vamos a regresar nada ahora aquí en la base de datos vamos a ver evaluar si se hizo la modificación y vamos a ver qué dunkel díaz es un don que el 2 por último ya por educación pues vamos a
(35:09) hacer es borrarlo el borrar también tenemos un map delete y stevie lead va a funcionar tal cual vamos a hacerlo asíncrono vamos a recibir la ddi y vamos a ponerle lo inyectado el contexto para poder eliminarlo porque vamos a poner la funcionalidad y vamos a ponerle un paréntesis de cerradura y punto y coma bien aquí lo único que vamos a hacer es ir a por la cerveza si la cerveza no existe pues vamos a encontrar en caso de que no exista pues mandamos un no found aquí vamos a mandar 1 fauno vamos a poner el si es nulo lo vamos a mandar 1
(35:34) found enseguida vamos a ejecutar el método reboot de tv punto virus y la tabla byrs eliminar la cerveza que obtuvimos aquí si pasó este es porque si existe y vamos a ponerle que guarde los cambios en forma asíncrona y por último vamos a regresar uno que hay uno de respuesta a 200 pero con la cerveza que acabamos de eliminar y de esta manera hemos acabado de eliminar con esta línea de este ok mandamos el objeto de eliminar porque lo necesitamos por año ahí está vamos a postman aquí le ponemos que quiero eliminar el hay 16 y vamos a
(36:05) ponerle quitar el verbo delete también es importante el verbo delete y aquí vamos a ejecutar obtenemos un 200 que es correcto y la cerveza que acabamos de eliminar aunque obviamente esto ya no está en la base de datos vamos a la base de datos y al ejecutar el cuero y vamos a ver que la y 16 yendo hasta el jazz también se borró se esfumó de la faz de la tierra y de esta manera tan rápido hicimos ya una programación embarquen que tiene que involucrar con inyección de dependencia y fuimos alguna base de datos y modificaciones tanto obtener
(36:31) guardar editar y eliminar entonces ya esto es una introducción a bach en los conceptos los vimos los de los códigos de respuesta y muchos verbos en http que lo que te sugiero que sigue sigue que veas temas de seguridad lo puedes ver en mi canal gratuitamente en pruebas unitarias también lo puede ver en mi canal gratuitamente validaciones también lo puedes ver en mi canal de gratuitamente y al final de este vídeo te voy a poner estos vídeos para si quieres continuar con tu aprendizaje sin gastar y pues nada si te gustó el vídeo pues
(36:59) dejarme un pulgar arriba si lo nuevo por aquí darle un a suscribir a mi nombre es héctor de león tengo unos cursos que están en el primer comentario fijado adiós [Música] [Música]

